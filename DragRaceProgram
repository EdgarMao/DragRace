# -*- python: 3.6 -*-

import math
import numpy as np
import random
import matplotlib.pyplot as plt

t = 0
dt = 0.1
E = 10e-22
T = 300.0
k = 1.3 * 10e-23
mx = 16 / (6.02 * 10e-23) / 10e3
my = 17 / (6.02 * 10e-23) / 10e3
nx = int(10e22)
ny = int(10e22)
nz = 0
nw = 0
trails = 10
dmin = 10e-2
reactions = 0.0
sideLength = 10e-6

list_t = []
list_x = []
list_y = []
list_z = []
list_w = []
list_t.append(t)
list_x.append(nx)
list_y.append(ny)
list_z.append(nz)
list_w.append(nw)

while t < 10:
	n = nx + ny + nz + nw
	pnx = nx / n
	pny = ny / n
	pnz = nz / n
	pnw = nw / n
	for i in range(trails):
		reactionWillHappen = True
		random1 = random.random()
		random2 = random.random()
		if (random1 < pnx and random2 < 1-pny) or (random2 < pnx and random1 > 1-pny):
			# Right particles, simulate reactions
			x1 = random.random() * sideLength
			y1 = random.random() * sideLength
			z1 = random.random() * sideLength
			x2 = random.random() * sideLength
			y2 = random.random() * sideLength
			z2 = random.random() * sideLength
			if random1 < pnx:
				m1 = mx
				m2 = my
			else:
				m2 = mx
				m1 = my
			vx1 = math.sqrt(k*T/m1) * np.random.normal(0,1)
			vy1 = math.sqrt(k*T/m1) * np.random.normal(0,1)
			vz1 = math.sqrt(k*T/m1) * np.random.normal(0,1)
			vx2 = math.sqrt(k*T/m2) * np.random.normal(0,1)
			vy2 = math.sqrt(k*T/m2) * np.random.normal(0,1)
			vz2 = math.sqrt(k*T/m2) * np.random.normal(0,1)
			print('pass barrier 1')
		else:
			print('Didnt pass barrier 1')
			reactionWillHappen = False
			continue
		if math.sqrt((x1-x2)**2+(y1-y2)**2+(z1-z2)**2) > dmin**2:
			print('Didnt pass barrier 2')
			reactionWillHappen = False
			continue
		else:
			print('pass barrier 2')
			pass
		vxcm = (mx*vx1+m2*vx2)/(m1+m2)
		vycm = (mx*vy1+m2*vy2)/(m1+m2)
		vzcm = (mx*vz1+m2*vz2)/(m1+m2)
		KEcm = 0.5 *m1*((vx1-vxcm)**2+(vy1-vycm)**2+(vz1-vzcm)**2) + \
		0.5 *m2*((vx1-vxcm)**2+(vy1-vycm)**2+(vz1-vzcm)**2)
		if KEcm < E:
			print('Didnt pass barrier 3')
			reactionWillHappen = False
			print(KEcm)
			continue
		else:
			print('pass barrier 3')
			pass
		reactions += 1
		print(reactions/trails)
	nx = nx - reactions / trails * n * (n-1)
	ny = ny - reactions / trails * n * (n-1)
	nz = nz + reactions / trails * n * (n-1)
	nw = nw + reactions / trails * n * (n-1)
	t += dt
	list_t.append(t)
	list_x.append(nx)
	list_y.append(ny)
	list_z.append(nz)
	list_w.append(nw)
	if nx < 0 or ny < 0 or nz < 0 or nw < 0:
		break
	else:
		print('Number explode', list_t[i-1])
		pass
print(' ')
print("t =",list_t)
print("x =",list_x)
print("y =",list_y)
print("z =",list_z)
print("w =",list_w)

def graph():
	plt.figure('nz')
	plt.title('Number of z as a function of time')
	plt.plot(list_t, list_x, color = '#377EB8')
	'''
	plt.xlim(xmax=2000)
	plt.xlim(xmin=0)
	plt.ylim(ymax=2000)
	plt.ylim(ymin=0)
	'''
	plt.xlabel('t [s]')
	plt.ylabel('nz')
	plt.grid(True)
	plt.show()
		
'''
kB = 1.38 * 10 ** -23
m = 2*1.0079 / (6.02 * 10 ** 23) #mass of one H atom
vx = math.sqrt(kB * 300 / m) * np.random.normal(0,1) #temperature
vy = math.sqrt(kB * 300 / m) * np.random.normal(0,1) #temperature
vz = math.sqrt(kB * 300 / m) * np.random.normal(0,1) #temperature
KE = 0.5 * m * (vx**2 + vy**2 + vz**2)


print vx
print vy
print vz
print KE
'''
